// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.src.Persistence.Common.Contexts;

#nullable disable

namespace Persistence.Migrations.Archive
{
    [DbContext(typeof(ArchiveContext))]
    partial class ArchiveContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.src.Domain.Auth.Permissions.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LockedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LockedByUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Roles.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Role_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "Description", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Role_Id_Name_Description_IsActive");

                    b.ToTable("Roles", "auth");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserClaims.Models.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "auth");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserLogins.Models.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_UserLogin_Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "LoginProvider", "ProviderDisplayName", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_UserLogin_Id_LoginProvider_ProviderDisplayName_Date");

                    b.ToTable("UserLogins", "auth");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserLogouts.Models.UserLogout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_UserLogout_Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "LoginProvider", "ProviderDisplayName", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_UserLogout_Id_LoginProvider_ProviderDisplayName_Date");

                    b.ToTable("UserLogouts", "auth");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserRoles.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRole_Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "UserId", "RoleId", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRole_Id_UserId_RoleId_Date");

                    b.ToTable("UserRoles", "auth");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Users.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InitialPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("MobilePhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("NeighborhoodId")
                        .HasColumnType("uuid");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("TwoFactorToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("TwoFactorTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Id");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "FirstName", "LastName", "Email", "UserName", "PhoneNumber", "MobilePhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Id_FirstName_LastName_Email_UserName_PhoneNumber_MobilePhoneNumber");

                    b.ToTable("Users", "auth");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Actions.Models.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LockedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("LockedByUserId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Aggreggates.Models.Aggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LockedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LockedByUserId");

                    b.HasIndex("PermissionId");

                    b.ToTable("Aggregate");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Features.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LockedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LockedByUserId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Modules.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LockedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId");

                    b.HasIndex("LockedByUserId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Continents.Models.Continent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Continent_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Continent_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Continent_Id_Code");

                    b.HasIndex("Id", "Name", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Continent_Id_Name_Code_IsActive");

                    b.ToTable("Continents", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Countries.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("double precision");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid>("ContinentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<string>("TLD")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Country_Code");

                    b.HasIndex("ContinentId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Country_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code", "ContinentId")
                        .IsUnique()
                        .HasDatabaseName("IX_Country_Id_Code_ContinentId");

                    b.HasIndex("Id", "Name", "Code", "Population", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Country_Id_Name_Code_Population_IsActive");

                    b.ToTable("Countries", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Districts.Models.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_District_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_District_Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code", "MunicipalityId")
                        .IsUnique()
                        .HasDatabaseName("IX_District_Id_Code_MunicipalityId");

                    b.HasIndex("Id", "Name", "Population", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_District_Id_Name_Population_Code_IsActive");

                    b.ToTable("Districts", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Municipalities.Models.Municipality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Municipality_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Municipality_Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code", "RegionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Municipality_Id_Code_RegionId");

                    b.HasIndex("Id", "Name", "Population", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Municipality_Id_Name_Population_Code_IsActive");

                    b.ToTable("Municipalities", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Neighborhoods.Models.Neighborhood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("StationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Neighborhood_Code");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Neighborhood_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code", "DistrictId")
                        .IsUnique()
                        .HasDatabaseName("IX_Neighborhood_Id_Code_DistrictId");

                    b.HasIndex("Id", "Name", "Zipcode", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Neighborhood_Id_Name_Zipcode_Code_IsActive");

                    b.ToTable("Neighborhoods", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Regions.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Region_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Region_Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code", "StateId")
                        .IsUnique()
                        .HasDatabaseName("IX_Region_Id_Code_StateId");

                    b.HasIndex("Id", "Name", "AreaKm2", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Region_Id_Name_AreaKm2_Code_IsActive");

                    b.ToTable("Regions", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.States.Models.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AreaKm2")
                        .HasColumnType("double precision");

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_State_Code");

                    b.HasIndex("CountryId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_State_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code", "CountryId")
                        .IsUnique()
                        .HasDatabaseName("IX_State_Id_Code_CountryId");

                    b.HasIndex("Id", "Name", "Population", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_State_Id_Name_Population_Code_IsActive");

                    b.ToTable("States", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Stations.Models.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("NeighborhoodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Station_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Station_Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("NeighborhoodId")
                        .IsUnique();

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Code", "LocationId")
                        .IsUnique()
                        .HasDatabaseName("IX_Station_Id_Code_LocationId");

                    b.HasIndex("Id", "Name", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Station_Id_Name_Code_IsActive");

                    b.ToTable("Stations", "geography_administrative");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.ClimateZones.Models.ClimateZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AvgPrecipitationMm")
                        .HasColumnType("double precision");

                    b.Property<double>("AvgTemperatureC")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_ClimateZone_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_ClimateZone_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "Code", "AvgTemperatureC", "AvgPrecipitationMm", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_ClimateZone_Id_Name_Code_AvgTemperatureC_AvgPrecipitationMm_IsActive");

                    b.ToTable("ClimateZones", "geography_natural");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.Locations.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ClimateZoneId")
                        .HasColumnType("uuid");

                    b.Property<double>("Depth")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid>("NaturalFeatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SurfaceTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimezoneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClimateZoneId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Location_Id");

                    b.HasIndex("NaturalFeatureId");

                    b.HasIndex("SurfaceTypeId");

                    b.HasIndex("TimezoneId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Longitude", "Latitude", "Altitude", "Depth", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Location_Id_Longitude_Latitude_Altitude_Depth_IsActive");

                    b.ToTable("Locations", "geography_natural");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.NaturalFeatures.Models.NaturalFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_NaturalFeature_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_NaturalFeature_Id_Name_Code_IsActive");

                    b.ToTable("NaturalFeatures", "geography_natural");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.SurfaceTypes.Models.SurfaceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_SurfaceType_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "Description", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_SurfaceType_Id_Name_Description_IsActive");

                    b.ToTable("SurfaceTypes", "geography_natural");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.Timezones.Models.Timezone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double?>("DstOffset")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("SupportsDaylightSaving")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<double>("UtcOffset")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Timezone_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Timezone_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "Code", "UtcOffset", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Timezone_Id_Name_Code_UtcOffset_IsActive");

                    b.ToTable("Timezones", "geography_natural");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.AuditLogs.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("AfterValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("BeforeValues")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsSystemAction")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TelemetryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TelemetryId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserLockedId");

                    b.ToTable("AuditLogs", "metrics");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.LogErrors.Models.LogError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Instance")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_LogError_Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Error", "StatusCode", "Timestamp")
                        .IsUnique()
                        .HasDatabaseName("IX_LogError_Id_Error_StatusCode_Timestamp");

                    b.ToTable("LogErrors", "metrics");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.Stories.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SourceTelemetryRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TargetTelemetryRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TelemetryRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SourceTelemetryRecordId");

                    b.HasIndex("TargetTelemetryRecordId");

                    b.HasIndex("TelemetryRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("Stories", "metrics");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.TelemetryRecords.Models.TelemetryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CPUusage")
                        .HasColumnType("double precision");

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MemoryUsed")
                        .HasColumnType("bigint");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RequestBodySize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RequestTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ResponseBodySize")
                        .HasColumnType("bigint");

                    b.Property<long>("ResponseTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ResponseTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Method", "Path", "StatusCode", "ResponseTime", "RequestTimestamp")
                        .IsUnique()
                        .HasDatabaseName("IX_TelemetryRecord_Id_Method_StatusCode_ResponseTime_RequestTimestamp");

                    b.ToTable("TelemetryRecords", "metrics");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.Trails.Trail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuditLogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SourceAuditLogId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TargetAuditLogId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("SourceAuditLogId");

                    b.HasIndex("TargetAuditLogId");

                    b.HasIndex("UserLockedId");

                    b.ToTable("Trails", "metrics");
                });

            modelBuilder.Entity("server.src.Domain.Support.ChangeLogs.Models.ChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.Property<string>("VersionLog")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_ChangeLog_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "VersionLog", "DateTime")
                        .IsUnique()
                        .HasDatabaseName("IX_ChangeLog_VersionLog_DateTime");

                    b.ToTable("ChangeLogs", "supprort");
                });

            modelBuilder.Entity("server.src.Domain.Support.ChangeTypes.Models.ChangeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_ChangeType_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_ChangeType_Id_Name_IsActive");

                    b.ToTable("ChangeTypes", "supprort");
                });

            modelBuilder.Entity("server.src.Domain.Support.Changes.Models.Change", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChangeLogId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChangeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChangeTypeId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeLogId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("ChangeTypeId1");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Change_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Change_Id_Name");

                    b.ToTable("Changes", "supprort");
                });

            modelBuilder.Entity("server.src.Domain.Support.FAQCategories.Models.FAQCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_FAQCategory_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_FAQCategory_Id_Name_IsActive");

                    b.ToTable("FAQCategories", "supprort");
                });

            modelBuilder.Entity("server.src.Domain.Support.FAQs.Models.FAQ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("FAQCategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FAQCategoryId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_FAQ_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Title", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_FAQ_Id_Title_IsActive");

                    b.ToTable("FAQs", "supprort");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.Forecasts.Models.Forecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AirQualityIndex")
                        .HasColumnType("integer");

                    b.Property<int>("CloudCover")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FeelsLikeC")
                        .HasColumnType("integer");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<int>("LightningProbability")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MoonPhaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("PollenCount")
                        .HasColumnType("integer");

                    b.Property<double>("PrecipitationMm")
                        .HasColumnType("double precision");

                    b.Property<double>("PressureHpa")
                        .HasColumnType("double precision");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<TimeSpan>("Sunrise")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("Sunset")
                        .HasColumnType("interval");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("UVIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.Property<double>("VisibilityKm")
                        .HasColumnType("double precision");

                    b.Property<Guid>("WarningId")
                        .HasColumnType("uuid");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.Property<double>("WindSpeedKph")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Forecast_Id");

                    b.HasIndex("MoonPhaseId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("WarningId");

                    b.HasIndex("Id", "Date", "TemperatureC", "Humidity")
                        .IsUnique()
                        .HasDatabaseName("IX_Forecast_Id_Date_TemperatureC_Humidity");

                    b.ToTable("Forecasts", "weather_collections");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.MoonPhases.Models.MoonPhase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("DurationDays")
                        .HasColumnType("double precision");

                    b.Property<double>("IlluminationPercentage")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSignificant")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("OccurrenceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PhaseOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_MoonPhase_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_MoonPhase_Id_Name_Code");

                    b.ToTable("MoonPhases", "weather_collections");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.Observations.Models.Observation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AirQualityIndex")
                        .HasColumnType("integer");

                    b.Property<int>("CloudCover")
                        .HasColumnType("integer");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<int>("LightningProbability")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MoonPhaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("PollenCount")
                        .HasColumnType("integer");

                    b.Property<double>("PrecipitationMm")
                        .HasColumnType("double precision");

                    b.Property<double>("PressureHpa")
                        .HasColumnType("double precision");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UVIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.Property<double>("VisibilityKm")
                        .HasColumnType("double precision");

                    b.Property<int>("WindDirection")
                        .HasColumnType("integer");

                    b.Property<double>("WindSpeedKph")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Observation_Id");

                    b.HasIndex("MoonPhaseId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Timestamp", "TemperatureC", "Humidity")
                        .IsUnique()
                        .HasDatabaseName("IX_Observation_Id_Timestamp_TemperatureC_Humidity");

                    b.ToTable("Observations", "weather_collections");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.Warnings.Models.Warning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RecommendedActions")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Warning_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "Description")
                        .IsUnique()
                        .HasDatabaseName("IX_Warning_Id_Name_Description");

                    b.ToTable("Warnings", "weather_collections");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.HealthStatuses.Models.HealthStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_HealthStatus_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_HealthStatus_Id");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_HealthStatus_Id_Name");

                    b.HasIndex("Id", "Name", "Code", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_HealthStatus_Id_Name_Code_IsActive");

                    b.ToTable("HealthStasus", "weather_tools");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Sensors.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("HealthStatusId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HealthStatusId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Sensor_Id");

                    b.HasIndex("StationId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name", "SN", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Sensor_Id_Name_SN_IsActive");

                    b.ToTable("Sensors", "weather_tools");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Series.Models.Serie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Serie_Id");

                    b.HasIndex("SensorId");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Value", "Timestamp")
                        .IsUnique()
                        .HasDatabaseName("IX_Serie_Id_Value_Timestamp");

                    b.ToTable("Series", "weather_tools");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Units.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserLockedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Unit_Id");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasDatabaseName("IX_Unit_Symbol");

                    b.HasIndex("UserLockedId");

                    b.HasIndex("Id", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Unit_Id_Name");

                    b.HasIndex("Id", "Name", "Symbol", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("IX_Unit_Id_Name_Symbol_IsActive");

                    b.ToTable("Units", "weather_tools");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Permissions.Models.Permission", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId");

                    b.HasOne("server.src.Domain.Auth.Roles.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LockedByUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Roles.Models.Role", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserClaims.Models.UserClaim", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserLogins.Models.UserLogin", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserLogouts.Models.UserLogout", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "User")
                        .WithMany("UserLogouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.src.Domain.Auth.UserRoles.Models.UserRole", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Roles.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Users.Models.User", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Administrative.Neighborhoods.Models.Neighborhood", "Neighborhood")
                        .WithMany("Users")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Actions.Models.Action", b =>
                {
                    b.HasOne("server.src.Domain.Developer.Features.Models.Feature", "Feature")
                        .WithMany("Actions")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId");

                    b.Navigation("Feature");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Aggreggates.Models.Aggregate", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId");

                    b.HasOne("server.src.Domain.Auth.Permissions.Models.Permission", null)
                        .WithMany("Aggregates")
                        .HasForeignKey("PermissionId");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Features.Models.Feature", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId");

                    b.HasOne("server.src.Domain.Developer.Modules.Models.Module", null)
                        .WithMany("Features")
                        .HasForeignKey("ModuleId");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Modules.Models.Module", b =>
                {
                    b.HasOne("server.src.Domain.Developer.Aggreggates.Models.Aggregate", "Aggregate")
                        .WithMany("Modules")
                        .HasForeignKey("AggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId");

                    b.Navigation("Aggregate");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Continents.Models.Continent", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Countries.Models.Country", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Administrative.Continents.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Continent");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Districts.Models.District", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Administrative.Municipalities.Models.Municipality", "Municipality")
                        .WithMany("Districts")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Municipalities.Models.Municipality", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Administrative.Regions.Models.Region", "Region")
                        .WithMany("Municipalities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Neighborhoods.Models.Neighborhood", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Administrative.Districts.Models.District", "District")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("District");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Regions.Models.Region", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Administrative.States.Models.State", "State")
                        .WithMany("Regions")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.States.Models.State", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Administrative.Countries.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Stations.Models.Station", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Natural.Locations.Models.Location", "Location")
                        .WithOne("Station")
                        .HasForeignKey("server.src.Domain.Geography.Administrative.Stations.Models.Station", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Geography.Administrative.Neighborhoods.Models.Neighborhood", "Neighborhood")
                        .WithOne("Station")
                        .HasForeignKey("server.src.Domain.Geography.Administrative.Stations.Models.Station", "NeighborhoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");

                    b.Navigation("LockedByUser");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.ClimateZones.Models.ClimateZone", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.Locations.Models.Location", b =>
                {
                    b.HasOne("server.src.Domain.Geography.Natural.ClimateZones.Models.ClimateZone", "ClimateZone")
                        .WithMany("Locations")
                        .HasForeignKey("ClimateZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Geography.Natural.NaturalFeatures.Models.NaturalFeature", "NaturalFeature")
                        .WithMany("Locations")
                        .HasForeignKey("NaturalFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Geography.Natural.SurfaceTypes.Models.SurfaceType", "SurfaceType")
                        .WithMany("Locations")
                        .HasForeignKey("SurfaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Geography.Natural.Timezones.Models.Timezone", "Timezone")
                        .WithMany("Locations")
                        .HasForeignKey("TimezoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ClimateZone");

                    b.Navigation("LockedByUser");

                    b.Navigation("NaturalFeature");

                    b.Navigation("SurfaceType");

                    b.Navigation("Timezone");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.NaturalFeatures.Models.NaturalFeature", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.SurfaceTypes.Models.SurfaceType", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.Timezones.Models.Timezone", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.AuditLogs.Models.AuditLog", b =>
                {
                    b.HasOne("server.src.Domain.Metrics.TelemetryRecords.Models.TelemetryRecord", "TelemetryRecord")
                        .WithMany("AuditLogs")
                        .HasForeignKey("TelemetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("TelemetryRecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.LogErrors.Models.LogError", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "User")
                        .WithMany("LogErrors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.Stories.Story", b =>
                {
                    b.HasOne("server.src.Domain.Metrics.TelemetryRecords.Models.TelemetryRecord", "SourceTelemetryRecord")
                        .WithMany()
                        .HasForeignKey("SourceTelemetryRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.src.Domain.Metrics.TelemetryRecords.Models.TelemetryRecord", "TargetTelemetryRecord")
                        .WithMany()
                        .HasForeignKey("TargetTelemetryRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.src.Domain.Metrics.TelemetryRecords.Models.TelemetryRecord", null)
                        .WithMany("Stories")
                        .HasForeignKey("TelemetryRecordId");

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", null)
                        .WithMany("Stories")
                        .HasForeignKey("UserId");

                    b.Navigation("SourceTelemetryRecord");

                    b.Navigation("TargetTelemetryRecord");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.TelemetryRecords.Models.TelemetryRecord", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "User")
                        .WithMany("TelemetryRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.Trails.Trail", b =>
                {
                    b.HasOne("server.src.Domain.Metrics.AuditLogs.Models.AuditLog", null)
                        .WithMany("Trails")
                        .HasForeignKey("AuditLogId");

                    b.HasOne("server.src.Domain.Metrics.AuditLogs.Models.AuditLog", "SourceAuditLog")
                        .WithMany()
                        .HasForeignKey("SourceAuditLogId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.src.Domain.Metrics.AuditLogs.Models.AuditLog", "TargetAuditLog")
                        .WithMany()
                        .HasForeignKey("TargetAuditLogId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("SourceAuditLog");

                    b.Navigation("TargetAuditLog");
                });

            modelBuilder.Entity("server.src.Domain.Support.ChangeLogs.Models.ChangeLog", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Support.ChangeTypes.Models.ChangeType", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Support.Changes.Models.Change", b =>
                {
                    b.HasOne("server.src.Domain.Support.ChangeLogs.Models.ChangeLog", "ChangeLog")
                        .WithMany("Changes")
                        .HasForeignKey("ChangeLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Support.ChangeTypes.Models.ChangeType", null)
                        .WithMany("Changes")
                        .HasForeignKey("ChangeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Support.ChangeTypes.Models.ChangeType", "ChangeType")
                        .WithMany()
                        .HasForeignKey("ChangeTypeId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChangeLog");

                    b.Navigation("ChangeType");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Support.FAQCategories.Models.FAQCategory", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Support.FAQs.Models.FAQ", b =>
                {
                    b.HasOne("server.src.Domain.Support.FAQCategories.Models.FAQCategory", "FAQCategory")
                        .WithMany("FAQs")
                        .HasForeignKey("FAQCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FAQCategory");

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.Forecasts.Models.Forecast", b =>
                {
                    b.HasOne("server.src.Domain.Weather.Collections.MoonPhases.Models.MoonPhase", "MoonPhase")
                        .WithMany("Forecasts")
                        .HasForeignKey("MoonPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Geography.Administrative.Stations.Models.Station", "Station")
                        .WithMany("Forecasts")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.src.Domain.Weather.Collections.Warnings.Models.Warning", "Warning")
                        .WithMany("Forecasts")
                        .HasForeignKey("WarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LockedByUser");

                    b.Navigation("MoonPhase");

                    b.Navigation("Station");

                    b.Navigation("Warning");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.MoonPhases.Models.MoonPhase", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.Observations.Models.Observation", b =>
                {
                    b.HasOne("server.src.Domain.Weather.Collections.MoonPhases.Models.MoonPhase", "MoonPhase")
                        .WithMany("Observations")
                        .HasForeignKey("MoonPhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Geography.Administrative.Stations.Models.Station", "Station")
                        .WithMany("Observations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("MoonPhase");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.Warnings.Models.Warning", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.HealthStatuses.Models.HealthStatus", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Sensors.Models.Sensor", b =>
                {
                    b.HasOne("server.src.Domain.Weather.Tools.HealthStatuses.Models.HealthStatus", "Status")
                        .WithMany("Sensors")
                        .HasForeignKey("HealthStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Geography.Administrative.Stations.Models.Station", "Station")
                        .WithMany("Sensors")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Weather.Tools.Units.Models.Unit", "Unit")
                        .WithMany("Sensors")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("Station");

                    b.Navigation("Status");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Series.Models.Serie", b =>
                {
                    b.HasOne("server.src.Domain.Weather.Tools.Sensors.Models.Sensor", "Sensor")
                        .WithMany("Series")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Units.Models.Unit", b =>
                {
                    b.HasOne("server.src.Domain.Auth.Users.Models.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("UserLockedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Permissions.Models.Permission", b =>
                {
                    b.Navigation("Aggregates");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Roles.Models.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("server.src.Domain.Auth.Users.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("LogErrors");

                    b.Navigation("Stories");

                    b.Navigation("TelemetryRecords");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserLogouts");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Aggreggates.Models.Aggregate", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Features.Models.Feature", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("server.src.Domain.Developer.Modules.Models.Module", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Continents.Models.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Countries.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Districts.Models.District", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Municipalities.Models.Municipality", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Neighborhoods.Models.Neighborhood", b =>
                {
                    b.Navigation("Station");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Regions.Models.Region", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.States.Models.State", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Administrative.Stations.Models.Station", b =>
                {
                    b.Navigation("Forecasts");

                    b.Navigation("Observations");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.ClimateZones.Models.ClimateZone", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.Locations.Models.Location", b =>
                {
                    b.Navigation("Station");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.NaturalFeatures.Models.NaturalFeature", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.SurfaceTypes.Models.SurfaceType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("server.src.Domain.Geography.Natural.Timezones.Models.Timezone", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.AuditLogs.Models.AuditLog", b =>
                {
                    b.Navigation("Trails");
                });

            modelBuilder.Entity("server.src.Domain.Metrics.TelemetryRecords.Models.TelemetryRecord", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("server.src.Domain.Support.ChangeLogs.Models.ChangeLog", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("server.src.Domain.Support.ChangeTypes.Models.ChangeType", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("server.src.Domain.Support.FAQCategories.Models.FAQCategory", b =>
                {
                    b.Navigation("FAQs");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.MoonPhases.Models.MoonPhase", b =>
                {
                    b.Navigation("Forecasts");

                    b.Navigation("Observations");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Collections.Warnings.Models.Warning", b =>
                {
                    b.Navigation("Forecasts");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.HealthStatuses.Models.HealthStatus", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Sensors.Models.Sensor", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("server.src.Domain.Weather.Tools.Units.Models.Unit", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
