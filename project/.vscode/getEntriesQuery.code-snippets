{
    "GetEntriesQuery": {
      "prefix": "getEntriesQuery",
      "body": [
        "// packages",
        "using System.Linq.Expressions;",
        "using System.Net;",
        "",
        "// source",
        "using server.src.Application.${Entity}.Filters;",
        "using server.src.Application.${Entity}.Includes;",
        "using server.src.Application.${Entity}.Mappings;",
        "using server.src.Application.Interfaces;",
        "using server.src.Domain.Dto.Auth;",
        "using server.src.Domain.Dto.Common;",
        "using server.src.Domain.Models.Auth;",
        "using server.src.Domain.Models.Common;",
        "using server.src.Persistence.Interfaces;",
        "",
        "namespace server.src.Application.${Entity}.Queries;",
        "",
        "public record Get${Entity}Query(UrlQuery UrlQuery) : IRequest<ListResponse<List<ListItem${Entity}Dto>>>;",
        "",
        "public class Get${Entity}Handler : IRequestHandler<Get${Entity}Query, ListResponse<List<ListItem${Entity}Dto>>>",
        "{",
        "    private readonly ICommonRepository _commonRepository;",
        "    ",
        "    public Get${Entity}Handler(ICommonRepository commonRepository)",
        "    {",
        "        _commonRepository = commonRepository;",
        "    }",
        "",
        "    public async Task<ListResponse<List<ListItem${Entity}Dto>>> Handle(Get${Entity}Query query, CancellationToken token = default)",
        "    {",
        "        var pageParams = query.UrlQuery;",
        "        ",
        "        // Default Sorting",
        "        if (!pageParams.HasSortBy)",
        "        {",
        "            pageParams.SortBy = ${Entity}Filters.${Entity}NameSorting;",
        "            pageParams.SortDescending = false;",
        "        }",
        "",
        "        // Filtering",
        "        Expression<Func<${Entity}, bool>>? filter = null;",
        "        if (pageParams.HasFilter) filter = pageParams.Filter!.${Entity}SearchFilter();",
        "",
        "        var filters = new Expression<Func<${Entity}, bool>>[] { filter! };",
        "",
        "        // Including",
        "        var includes = ${Entity}Includes.Get${Entity}Includes();",
        "",
        "        // Paging",
        "        var paged${Entity} = await _commonRepository.GetPagedResultsAsync(pageParams, filters, includes, token);",
        "        // Mapping",
        "        var dto = paged${Entity}.Rows.Select(r => r.Item${Entity}DtoMapping()).ToList();",
        "",
        "        // Determine success ",
        "        var success = paged${Entity}.Rows.Count > 0;",
        "",
        "        // Initializing object",
        "        return new ListResponse<List<ListItem${Entity}Dto>>()",
        "        {",
        "            Data = dto,",
        "            Success = success,",
        "            Message = success ? \"${Entity} fetched successfully.\" : \"No ${Entity} found matching the filter criteria.\",",
        "            StatusCode = success ? (int)HttpStatusCode.OK : (int)HttpStatusCode.NotFound,",
        "            Pagination = new PaginatedList",
        "            {",
        "                TotalRecords = paged${Entity}.UrlQuery.TotalRecords,",
        "                PageSize = paged${Entity}.UrlQuery.PageSize,",
        "                PageNumber = paged${Entity}.UrlQuery.PageNumber ?? 1,",
        "            }",
        "        };",
        "    }",
        "}"
      ],
      "description": "Reusable snippet for GetEntityHandler query in C#"
    }
  }
  