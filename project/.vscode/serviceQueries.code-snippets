{
    "service Queries": {
      "prefix": "serviceQueries",
      "body": [
        "// source",
        "using server.src.Application.${Entity}.Interfaces;",
        "using server.src.Application.${Entity}.Queries;",
        "using server.src.Application.Interfaces;",
        "using server.src.Domain.Dto.Auth;",
        "using server.src.Domain.Dto.Common;",
        "using server.src.Domain.Models.Common;",
        "",
        "namespace server.src.Application.${Entity}.Services;",
        "",
        "public class ${Entity}Queries : I${Entity}Queries",
        "{",
        "    private readonly IRequestHandler<Get${Entity}Query, ListResponse<List<ListItem${Entity}Dto>>> _get${Entity}Handler;",
        "    private readonly IRequestHandler<Get${Entity}ByUserIdQuery, ListResponse<List<ListItem${Entity}Dto>>> _get${Entity}ByUserIdHandler;",
        "    private readonly IRequestHandler<Get${Entity}PickerQuery, Response<List<Picker${Entity}Dto>>> _get${Entity}PickerHandler;",
        "    private readonly IRequestHandler<Get${Entity}ByIdQuery, Response<Item${Entity}Dto>> _get${Entity}ByIdHandler;",
        "",
        "    public ${Entity}Queries(",
        "        IRequestHandler<Get${Entity}Query, ListResponse<List<ListItem${Entity}Dto>>> get${Entity}Handler,",
        "        IRequestHandler<Get${Entity}ByUserIdQuery, ListResponse<List<ListItem${Entity}Dto>>> get${Entity}ByUserIdHandler,",
        "        IRequestHandler<Get${Entity}PickerQuery, Response<List<Picker${Entity}Dto>>> get${Entity}PickerHandler,",
        "        IRequestHandler<Get${Entity}ByIdQuery, Response<Item${Entity}Dto>> get${Entity}ByIdHandler)",
        "    {",
        "        _get${Entity}Handler = get${Entity}Handler;",
        "        _get${Entity}ByUserIdHandler = get${Entity}ByUserIdHandler;",
        "        _get${Entity}PickerHandler = get${Entity}PickerHandler;",
        "        _get${Entity}ByIdHandler = get${Entity}ByIdHandler;",
        "    }",
        "",
        "    public async Task<ListResponse<List<ListItem${Entity}Dto>>> Get${Entity}Async(UrlQuery urlQuery, CancellationToken token = default)",
        "    {",
        "        var query = new Get${Entity}Query(urlQuery);",
        "        return await _get${Entity}Handler.Handle(query, token);",
        "    }",
        "",
        "    public async Task<ListResponse<List<ListItem${Entity}Dto>>> Get${Entity}ByUserIdAsync(Guid id, UrlQuery urlQuery, CancellationToken token = default)",
        "    {",
        "        var query = new Get${Entity}ByUserIdQuery(id, urlQuery);",
        "        return await _get${Entity}ByUserIdHandler.Handle(query, token);",
        "    }",
        "",
        "    public async Task<Response<List<Picker${Entity}Dto>>> Get${Entity}PickerAsync(CancellationToken token = default)",
        "    {",
        "        var query = new Get${Entity}PickerQuery();",
        "        return await _get${Entity}PickerHandler.Handle(query, token);",
        "    }",
        "",
        "    public async Task<Response<Item${Entity}Dto>> Get${Entity}ByIdAsync(Guid id, CancellationToken token = default)",
        "    {",
        "        var query = new Get${Entity}ByIdQuery(id);",
        "        return await _get${Entity}ByIdHandler.Handle(query, token);",
        "    }",
        "}"
      ],
      "description": "Generates an entity query"
    }
  }
  