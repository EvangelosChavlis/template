{
    "Create Command": {
      "prefix": "serviceCommand",
      "body": [
        "// packages",
        "using System.Linq.Expressions;",
        "using System.Net;",
        "",
        "// source",
        "using server.src.Application.${Entity}s.Mappings;",
        "using server.src.Application.${Entity}s.Validators;",
        "using server.src.Application.Common.Interfaces;",
        "using server.src.Domain.Dto.Common;",
        "using server.src.Persistence.Interfaces;",
        "",
        "namespace server.src.Application.${Entity}s.Commands;",
        "",
        "public record Create${Entity}Command(${Entity}Dto Dto) : IRequest<Response<string>>;",
        "",
        "public class Create${Entity}Handler : IRequestHandler<Create${Entity}Command, Response<string>>",
        "{",
        "    private readonly ICommonRepository _commonRepository;",
        "    private readonly IUnitOfWork _unitOfWork;",
        "",
        "    public Create${Entity}Handler(ICommonRepository commonRepository, IUnitOfWork unitOfWork)",
        "    {",
        "        _commonRepository = commonRepository;",
        "        _unitOfWork = unitOfWork;",
        "    }",
        "",
        "    public async Task<Response<string>> Handle(Create${Entity}Command command, CancellationToken token = default)",
        "    {",
        "        // Dto Validation",
        "        var dtoValidationResult = ${Entity}Validators.Validate(command.Dto);",
        "        if (!dtoValidationResult.IsValid)",
        "            return new Response<string>()",
        "                .WithMessage(\"Dto validation failed.\")",
        "                .WithStatusCode((int)HttpStatusCode.BadRequest)",
        "                .WithSuccess(dtoValidationResult.IsValid)",
        "                .WithData(string.Join(\"\\n\", dtoValidationResult.Errors));",
        "",
        "        // Begin Transaction",
        "        await _unitOfWork.BeginTransactionAsync(token);",
        "",
        "        // Searching Item",
        "        var includes = new Expression<Func<${Entity}, object>>[] { };",
        "        var filters = new Expression<Func<${Entity}, bool>>[] { x => x.Name!.Equals(command.Dto.Name) };",
        "        var existing${Entity} = await _commonRepository.GetResultByIdAsync(filters, includes, token);",
        "",
        "        // Check if the ${Entity} already exists in the system",
        "        if (existing${Entity} is not null)",
        "            return new Response<string>()",
        "                .WithMessage(\"Error creating ${Entity}.\")",
        "                .WithStatusCode((int)HttpStatusCode.BadRequest)",
        "                .WithSuccess(false)",
        "                .WithData($\"${Entity} with name {existing${Entity}.Name} already exists.\");",
        "",
        "        // Mapping and Saving ${Entity}",
        "        var ${entity} = command.Dto.Create${Entity}ModelMapping();",
        "        var modelValidationResult = ${Entity}Validators.Validate(${entity});",
        "        if (!modelValidationResult.IsValid)",
        "        {",
        "            await _unitOfWork.RollbackTransactionAsync(token);",
        "            return new Response<string>()",
        "                .WithMessage(\"Entity validation failed.\")",
        "                .WithStatusCode((int)HttpStatusCode.BadRequest)",
        "                .WithSuccess(modelValidationResult.IsValid)",
        "                .WithData(string.Join(\"\\n\", modelValidationResult.Errors));",
        "        }",
        "        var result = await _commonRepository.AddAsync(entity, token);",
        "",
        "        if (!result)",
        "        {",
        "            await _unitOfWork.RollbackTransactionAsync(token);",
        "            return new Response<string>()",
        "                .WithMessage(\"Error creating ${Entity}.\")",
        "                .WithStatusCode((int)HttpStatusCode.NotFound)",
        "                .WithSuccess(false)",
        "                .WithData(\"Failed to create ${Entity}.\");",
        "        }",
        "",
        "        // Commit Transaction",
        "        await _unitOfWork.CommitTransactionAsync(token);",
        "",
        "        // Initializing object",
        "        return new Response<string>()",
        "            .WithMessage(\"Success creating ${Entity}.\")",
        "            .WithStatusCode((int)HttpStatusCode.OK)",
        "            .WithSuccess(result)",
        "            .WithData($\"${Entity} {${entity}.Name} inserted successfully!\");",
        "    }",
        "}"
      ],
      "description": "Creates a commnd handler"
    }
  }
  