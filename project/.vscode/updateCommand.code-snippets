{
    "Update Command": {
      "prefix": "updateCommand",
      "body": [
        "// packages",
        "using System.Linq.Expressions;",
        "using System.Net;",
        "",
        "// source",
        "using server.src.Application.${Entity}s.Mappings;",
        "using server.src.Application.${Entity}s.Validators;",
        "using server.src.Application.Common.Interfaces;",
        "using server.src.Domain.Dto.Common;",
        "using server.src.Persistence.Interfaces;",
        "",
        "namespace server.src.Application.${Entity}s.Commands;",
        "",
        "public record Update${Entity}Command(Guid Id, ${Entity}Dto Dto) : IRequest<Response<string>>;",
        "",
        "public class Update${Entity}Handler : IRequestHandler<Update${Entity}Command, Response<string>>",
        "{",
        "    private readonly ICommonRepository _commonRepository;",
        "    private readonly IUnitOfWork _unitOfWork;",
        "",
        "    public Update${Entity}Handler(ICommonRepository commonRepository, IUnitOfWork unitOfWork)",
        "    {",
        "        _commonRepository = commonRepository;",
        "        _unitOfWork = unitOfWork;",
        "    }",
        "",
        "    public async Task<Response<string>> Handle(Update${Entity}Command command, CancellationToken token = default)",
        "    {",
        "        // Validation",
        "        var validationResult = ${Entity}Validators.Validate(command.Dto);",
        "",
        "        if (!validationResult.IsValid)",
        "            return new Response<string>()",
        "                .WithMessage(\"Validation failed.\")",
        "                .WithStatusCode((int)HttpStatusCode.BadRequest)",
        "                .WithSuccess(validationResult.IsValid)",
        "                .WithData(string.Join(\"\\n\", validationResult.Errors));",
        "",
        "        // Begin Transaction",
        "        await _unitOfWork.BeginTransactionAsync(token);",
        "",
        "        // Searching Item",
        "        var includes = new Expression<Func<${Entity}, object>>[] {  };",
        "        var filters = new Expression<Func<${Entity}, bool>>[] { x => x.Id == command.Id};",
        "        var ${entity} = await _commonRepository.GetResultByIdAsync(filters, includes, token);",
        "",
        "        // Check for existence",
        "        if (${entity} is null)",
        "        {",
        "            await _unitOfWork.RollbackTransactionAsync(token);",
        "            return new Response<string>()",
        "                .WithMessage(\"Error updating ${Entity}.\")",
        "                .WithStatusCode((int)HttpStatusCode.NotFound)",
        "                .WithSuccess(false)",
        "                .WithData(\"${Entity} not found\");",
        "        }",
        "",
        "        // Check for concurrency issues",
        "        if (${entity}.Version != command.Dto.Version)",
        "        {",
        "            await _unitOfWork.RollbackTransactionAsync(token);",
        "            return new Response<string>()",
        "                .WithMessage(\"Concurrency conflict.\")",
        "                .WithStatusCode((int)HttpStatusCode.Conflict)",
        "                .WithSuccess(false)",
        "                .WithData(\"The ${Entity} has been modified by another user. Please try again.\");",
        "        }",
        "",
        "        // Mapping, Validating, Saving Item",
        "        command.Dto.Update${Entity}Mapping(${entity});",
        "        var modelValidationResult = ${Entity}Validators.Validate(${entity});",
        "        if (!modelValidationResult.IsValid)",
        "        {",
        "            await _unitOfWork.RollbackTransactionAsync(token);",
        "            return new Response<string>()",
        "                .WithMessage(\"Entity validation failed.\")",
        "                .WithStatusCode((int)HttpStatusCode.BadRequest)",
        "                .WithSuccess(modelValidationResult.IsValid)",
        "                .WithData(string.Join(\"\\n\", modelValidationResult.Errors));",
        "        }",
        "        var result = await _commonRepository.UpdateAsync(${entity}, token);",
        "",
        "        // Saving failed.",
        "        if(!result)",
        "        {",
        "            await _unitOfWork.RollbackTransactionAsync(token);",
        "            return new Response<string>()",
        "                .WithMessage(\"Error updating ${Entity}.\")",
        "                .WithStatusCode((int)HttpStatusCode.InternalServerError)",
        "                .WithSuccess(false)",
        "                .WithData(\"Failed to update ${Entity}.\");",
        "        }",
        "",
        "        // Commit Transaction",
        "        await _unitOfWork.CommitTransactionAsync(token);",
        "",
        "        // Initializing object",
        "        return new Response<string>()",
        "            .WithMessage(\"Success updating ${Entity}.\")",
        "            .WithStatusCode((int)HttpStatusCode.Created)",
        "            .WithSuccess(result)",
        "            .WithData($\"${Entity} {${Entity}.Name} updated successfully!\");",
        "    }",
        "}"
      ],
      "description": "Creates an update command handler for an entity"
    }
}
