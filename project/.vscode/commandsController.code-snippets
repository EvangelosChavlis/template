{
    "Commands Controller": {
      "prefix": "commandsController",
      "body": [
        "// packages",
        "using Microsoft.AspNetCore.Authorization;",
        "using Microsoft.AspNetCore.Mvc;",
        "using Swashbuckle.AspNetCore.Annotations;",
        "",
        "// source",
        "using server.src.Domain.Dto.Common;",
        "using server.src.Domain.Dto.${Entity};",
        "using server.src.Api.Controllers;",
        "using server.src.Application.${Entity}s.Interfaces;",
        "",
        "namespace server.src.Api.Controllers.${Entity}s;",
        "",
        "[ApiController]",
        "[Route(\"api/${Entity}s\")]",
        "public class ${Entity}CommandsController : BaseApiController",
        "{",
        "    private readonly I${Entity}Commands _${Entity}Commands;",
        "",
        "    public ${Entity}CommandsController(I${Entity}Commands ${Entity}Commands)",
        "    {",
        "        _${Entity}Commands = ${Entity}Commands;",
        "    }",
        "",
        "    [ApiExplorerSettings(GroupName = \"${Entity}\")]",
        "    [HttpPost]",
        "    [SwaggerOperation(Summary = \"Create a new ${Entity}\", Description = \"Creates a new ${Entity} in the system.\")]",
        "    [SwaggerResponse(StatusCodes.Status200OK, \"${Entity} created successfully\", typeof(Response<string>))]",
        "    [SwaggerResponse(StatusCodes.Status400BadRequest, \"Invalid ${Entity} data\")]",
        "    public async Task<IActionResult> Create${Entity}([FromBody] ${Entity}Dto dto, CancellationToken token)",
        "    {",
        "        var result = await _${Entity}Commands.Create${Entity}Async(dto, token);",
        "        return StatusCode(result.StatusCode, result);",
        "    }",
        "",
        "    [ApiExplorerSettings(GroupName = \"${Entity}\")]",
        "    [HttpPost]",
        "    [Route(\"initialize\")]",
        "    [SwaggerOperation(Summary = \"Initialize multiple ${Entity}s\", Description = \"Initializes multiple ${Entity}s in the system.\")]",
        "    [SwaggerResponse(StatusCodes.Status200OK, \"${Entity}s initialized successfully\", typeof(Response<string>))]",
        "    [SwaggerResponse(StatusCodes.Status400BadRequest, \"Invalid ${Entity} data\")]",
        "    public async Task<IActionResult> Initialize${Entity}([FromBody] List<${Entity}Dto> dto, CancellationToken token)",
        "    {",
        "        var result = await _${Entity}Commands.Initialize${Entity}sAsync(dto, token);",
        "        return StatusCode(result.StatusCode, result);",
        "    }",
        "",
        "    [ApiExplorerSettings(GroupName = \"${Entity}\")]",
        "    [HttpPut]",
        "    [Route(\"{id}\")]",
        "    [SwaggerOperation(Summary = \"Update an existing ${Entity}\", Description = \"Updates an existing ${Entity} by its unique ID.\")]",
        "    [SwaggerResponse(StatusCodes.Status200OK, \"${Entity} updated successfully\", typeof(Response<string>))]",
        "    [SwaggerResponse(StatusCodes.Status404NotFound, \"${Entity} not found\")]",
        "    public async Task<IActionResult> Update${Entity}(Guid id, [FromBody] ${Entity}Dto dto, CancellationToken token)",
        "    {",
        "        var result = await _${Entity}Commands.Update${Entity}Async(id, dto, token);",
        "        return StatusCode(result.StatusCode, result);",
        "    }",
        "",
        "    [ApiExplorerSettings(GroupName = \"${Entity}\")]",
        "    [HttpDelete]",
        "    [Route(\"{id}/{versionId}\")]",
        "    [SwaggerOperation(Summary = \"Delete a ${Entity} by ID\", Description = \"Deletes a specific ${Entity} by its unique ID.\")]",
        "    [SwaggerResponse(StatusCodes.Status200OK, \"${Entity} deleted successfully\", typeof(Response<string>))]",
        "    [SwaggerResponse(StatusCodes.Status404NotFound, \"${Entity} not found\")]",
        "    public async Task<IActionResult> Delete${Entity}(Guid id, Guid versionId, CancellationToken token)",
        "    {",
        "        var result = await _${Entity}Commands.Delete${Entity}Async(id, versionId, token);",
        "        return StatusCode(result.StatusCode, result);",
        "    }",
        "}"
      ],
      "description": "Generates a controller for handling entity commands"
    }
  }
  