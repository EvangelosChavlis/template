{
    "Service Commands": {
      "prefix": "serviceCommands",
      "body": [
        "// source",
        "using server.src.Domain.Dto.Common;",
        "using server.src.Domain.Dto.${Entity};",
        "using server.src.Application.Interfaces;",
        "using server.src.Application.${Entity}s.Commands;",
        "using server.src.Application.${Entity}s.Interfaces;",
        "",
        "namespace server.src.Application.${Entity}s.Services;",
        "",
        "public class ${Entity}Commands : I${Entity}Commands",
        "{",
        "    private readonly IRequestHandler<Initialize${Entity}sCommand, Response<string>> _initialize${Entity}sHander;",
        "    private readonly IRequestHandler<Create${Entity}Command, Response<string>> _create${Entity}Handler;",
        "    private readonly IRequestHandler<Update${Entity}Command, Response<string>> _update${Entity}Handler;",
        "    private readonly IRequestHandler<Delete${Entity}Command, Response<string>> _delete${Entity}Handler;",
        "",
        "    public ${Entity}Commands(",
        "        IRequestHandler<Initialize${Entity}sCommand, Response<string>> initialize${Entity}sHander,",
        "        IRequestHandler<Create${Entity}Command, Response<string>> create${Entity}Handler,",
        "        IRequestHandler<Update${Entity}Command, Response<string>> update${Entity}Handler,",
        "        IRequestHandler<Delete${Entity}Command, Response<string>> delete${Entity}Handler)",
        "    {",
        "        _initialize${Entity}sHander = initialize${Entity}sHander;",
        "        _create${Entity}Handler = create${Entity}Handler;",
        "        _update${Entity}Handler = update${Entity}Handler;",
        "        _delete${Entity}Handler = delete${Entity}Handler;",
        "    }",
        "",
        "    public async Task<Response<string>> Initialize${Entity}sAsync(List<${Entity}Dto> dto,",
        "        CancellationToken token = default)",
        "    {",
        "        var command = new Initialize${Entity}sCommand(dto);",
        "        return await _initialize${Entity}sHander.Handle(command, token);",
        "    }",
        "",
        "    public async Task<Response<string>> Create${Entity}Async(${Entity}Dto dto,",
        "        CancellationToken token = default)",
        "    {",
        "        var command = new Create${Entity}Command(dto);",
        "        return await _create${Entity}Handler.Handle(command, token);",
        "    }",
        "",
        "    public async Task<Response<string>> Update${Entity}Async(Guid id, ${Entity}Dto dto,",
        "        CancellationToken token = default)",
        "    {",
        "        var command = new Update${Entity}Command(id, dto);",
        "        return await _update${Entity}Handler.Handle(command, token);",
        "    }",
        "",
        "    public async Task<Response<string>> Delete${Entity}Async(Guid id,",
        "        Guid version, CancellationToken token = default)",
        "    {",
        "        var command = new Delete${Entity}Command(id, version);",
        "        return await _delete${Entity}Handler.Handle(command, token);",
        "    }",
        "}"
      ],
      "description": "Generates Commands and Service Class"
    }
  }
  